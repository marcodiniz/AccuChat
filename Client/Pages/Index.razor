@page "/"
@using Blazored.LocalStorage;
@inject NavigationManager NavigationManager;
@inject Blazored.LocalStorage.ISyncLocalStorageService LocalStorage

<div class="wrapper @faderClass">
    <div class="avatar" style="--avatarX:@avatarX; --avatarY: @avatarY;">
        <div class="chooser">
            <div class="arrow" @onclick="() => ChangeCode(-1)">◀</div>
            <div class="imageCharWalking"></div>
            <div class="arrow" @onclick="() => ChangeCode(+1)">▶</div>
        </div>
    </div>
    <input type="text" class="name" @bind-value="Name" @bind-value:event="oninput" @ref="input" autofocus />
    <button type="button" class="join" onclick="@Join">
        <div class="joia @(validName ? "" : "not")">👍</div>
    </button>
</div>

@code {
    [Inject] private GameServer Server { get; set; }

    ElementReference input;

    bool validName = false;
    string faderClass = "";
    string name = "Player Name";
    public string Name
    {
        get => name; set
        {
            name = value[0..Math.Min(value.Length, 17)].TrimStart();
            validName = name.Trim().Length >= 5 && (name.StartsWith("Playe") == false);

        }
    }

    int avatarCode = Random.Shared.Next(0, 95);
    int avatarX => (avatarCode % 12) * 3;
    int avatarY => (avatarCode / 12) * 4 + (int)EDirection.Down;

    protected override void OnInitialized()
    {
        var storedName = LocalStorage.GetItem<string>("name");
        if (string.IsNullOrWhiteSpace(storedName) == false)
        {
            Name = storedName;
        }

        var storedAvatarCode= LocalStorage.GetItem<int?>("avatarCode");
        if (storedAvatarCode != null)
        {
            avatarCode = storedAvatarCode.Value;
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await input.FocusAsync();
        if (firstRender) return;

    }

    async void Join()
    {
        if (validName)
        {
            faderClass = "fade";
            if (Server.IsConnected == false)
            {
                await Server.StartAsync("http://localhost:4422/hub");
            }

            await Server.Join(name, avatarCode);

            LocalStorage.SetItem("name", name);
            LocalStorage.SetItem("avatarCode", avatarCode);

            NavigationManager.NavigateTo("Game");
        }
    }

    void ChangeCode(int change)
    {
        avatarCode += change;
        if (avatarCode > 95) avatarCode = 0;
        if (avatarCode < 0) avatarCode = 95;

    }
}

<style>
    .wrapper {
        background-color: black;
        position: absolute;
        height: 100%;
        width: 100%;
        align-content: center;
        justify-content: center;
        display: flex;
        flex-direction: column;
        flex-wrap: wrap;
    }

    .avatar {
        @*background: cyan;*@ align-content: center;
        justify-content: center;
        align-self: center;
    }


    .imageCharWalking {
        margin: auto;
        transform: scale(1.5);
        animation-iteration-count: infinite;
        animation-duration: 0.3s;
        animation-timing-function: steps(2, jump-none);
    }

    .chooser {
        display: inline-flex;
    }

    .arrow {
        color: dimgray;
        font-family: math;
        font-size: 48px;
        margin: -5px 10px 0 10px;
        height: 48px;
        user-select: none;
    }

        .arrow:hover {
            color: darkgray;
            cursor: pointer;
        }

        .arrow:active {
            color: white;
        }

    .name {
        color: white;
        text-shadow: -1px -1px 0 #000, 1px -1px 0 #000, -1px 1px 0 #000, 1px 1px 0 #000;
        font-weight: bold;
        font-size: x-large;
        text-align: center;
        background: gray;
        background: none;
        border: none;
        margin-top: 10px;
    }

        .name:focus-visible {
            outline: unset;
        }

    .join {
        margin: 5px auto 0 auto;
        font-size: 50px;
        background: none;
        border: none !important;
        box-shadow: none !important;
        outline: none !important;
    }


    .joia {
        transition: text-shadow 0.2s ease-in-out, transform 0.5s ease-in-out;
        width: 77px;
        min-height: 77px;
        max-height: 77px;
    }

        .joia.not {
            transform: rotate(180deg);
        }

            .joia:hover {
            text-shadow: 0 0 30px white, -2px -2px 2px white, -2px 2px 2px white, 2px -2px 2px white, 2px 2px 2px white;
            }

            .joia.not:hover {
                text-shadow: 0 0 30px red, -2px -2px 2px red, -2px 2px 2px red, 2px -2px 2px red, 2px 2px 2px red;
            }
</style>
